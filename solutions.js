////////////////////////////////////////////////////////////////////////////
// Problem 1 ///////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////

// If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
// Find the sum of all the multiples of 3 or 5 below 1000.

function solve1() {
  var sum = 0;
  for (var i = 999; i >= 0; i--) {
    if (i % 5 == 0 || i % 3 == 0) {
      sum += i;
    }
  }
  return sum;  
}

////////////////////////////////////////////////////////////////////////////
// Problem 2 ///////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////

// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

function solve2() {
  var fib = [1, 2];
  var sum = 2;

  function getNext()  {
    next = fib[0] + fib[1];
    fib.shift();
    fib.push(next);
  }

  getNext();

  while (next < 4000000) {
    if (next % 2 == 0) {
      sum += next;
    }
    getNext();
  }
  return sum;
}

////////////////////////////////////////////////////////////////////////////
// Problem 3 ///////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////

// The prime factors of 13195 are 5, 7, 13 and 29.
// What is the largest prime factor of the number 600851475143 ?

function solve3() {
  var num = 600851475143;
  var res = 0;
  var guess = 0;
  for (var i = 2; i <= (num/2); i++) {
    guess = Math.floor(num / i);
    if (isFactor(num, guess) && isPrime(guess)) {
      return guess;
    }
  }
}

function isFactor(big, small) {
  return big % small === 0;
}

function isPrime(n) {
  if ((n == 1) ||               // n is 1
      (n % 10 == 5) ||          // n is multiple of 5
      (n != 2 && n % 2 == 0)) { // multiple of 2 (but not 2 itself)
    return;
  }
  var sqrt = Math.sqrt(n);
  for (var i = 2; i <= sqrt; i++) {
    if (n % i === 0) {
      return false;
    }
  }
  return true;
}

////////////////////////////////////////////////////////////////////////////
// Problem 4 ///////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////

// A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.
// Find the largest palindrome made from the product of two 3-digit numbers.

function solve4() {   
  var max = 999*999;
  var min = 100*100;
  var prod = 0;
  var res = 0;
  for (var i1 = 999; i1 >= 100; i1--) {
    for (var i2 = i1; i2 >= 100; i2--) {
      prod = String(i1 * i2);
      var palind = true;
      for (var i = 0; i < Math.floor(prod.length/1); i++) {
        if (prod.charAt(i) != prod.charAt(prod.length - 1 - i)) {
          palind = false;
        }
      }
      if (palind && Number(prod) > res) {
        res = Number(prod);
      }
    }
  }
  return res;
}

////////////////////////////////////////////////////////////////////////////
// Problem 5 ///////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////

// 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
// What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?

// x <= ceil/2 is out since it will be represented in (ceil/2..ceil]
// ie any multiple of ceil is a multiple of ceil/2

function solve5() {   
  var ceil = 20;
  var floor = ceil/2;
  var factors = {};
  for (var i = ceil; i > floor; i--) {
    addFactorCount(factors, getPrimeFactors(i));
  }
  var res = 1;
  for (factor in factors) {
    res = res * (Math.pow(factor, factors[factor]));
  }
  return res;
}

// example factor_arr: [2, 2, 3]
function addFactorCount(old_factors, factor_arr) {
  var new_factors = {};
  for (var i = factor_arr.length - 1; i >= 0; i--) {
    if (new_factors[factor_arr[i]]) {
      new_factors[factor_arr[i]]++;
    } else {
      new_factors[factor_arr[i]] = 1;
    }
  }
  for (factor in new_factors) {
    if (old_factors[factor]) {
      old_factors[factor] = Math.max(old_factors[factor], new_factors[factor]);
    } else {
      old_factors[factor] = new_factors[factor];
    }
  }
}

function getPrimeFactors(n) {
  if (isPrime(n)) {
    return [n];
  } else {
    var factor_arr = [];
    for (var i = Math.floor(n/2); i >= 2; i--) {
      if (isFactor(n, i) && isPrime(i)) {
        factor_arr.push(i);
      }
    }
    var prod = factor_arr.reduce(function(a,b){ return a*b; }) ;
    if (prod == n) {
      return factor_arr;
    } else {
      factor_arr.push(getPrimeFactors(n / prod));
      return flatten(factor_arr);
    }
  }
}

function flatten(arr) {
  return arr.reduce(function (flat, toFlatten)  {
    return flat.concat(Array.isArray(toFlatten) ? flatten(toFlatten) : toFlatten);
  }, []);
}

////////////////////////////////////////////////////////////////////////////
// Problem 6 ///////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////

// The sum of the squares of the first ten natural numbers is,
// 12 + 22 + ... + 102 = 385
// The square of the sum of the first ten natural numbers is,
// (1 + 2 + ... + 10)2 = 552 = 3025
// Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.
// Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.

function solve6() {   
  var n = 100;
  var sum_of_squares = 0;
  var square_of_sum  = Math.pow(n * (n + 1) / 2, 2);
  for (var i = n; i > 0; i--) {
    sum_of_squares += Math.pow(i, 2);
  }
  return Math.abs(square_of_sum - sum_of_squares);
}

////////////////////////////////////////////////////////////////////////////
// Problem 7 ///////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////

// By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
// What is the 10,001st prime number?

function solve7() {
  var target = 10001;
  var count  = 0;
  var iter   = 0;
  var start  = 0;
  var stop; 

  while (count < target) {
    var numbers = new Uint8Array(target);
    stop = start + target - 1;

    if (iter == 0) {
      numbers[0] = 1;
      numbers[1] = 1;
    }

    for (var i1 = 2; i1 < numbers.length; i1++) {
      var min = Math.max(Math.ceil(start / i1), 2); // at least 2
      var max = Math.floor(stop / i1);
      for (var i2 = min; i2 <= max; i2++) {
        numbers[i1 * i2 - (target * iter)] = 1;
      }
    }

    for (var i = 0; i < numbers.length; i++) {
      if (!numbers[i]) { // eg if numbers[i] was not set to 1 in above loop
        count++;
        if (count == target) {
          return i + (target * iter);
        }
      }
    }

    start = stop + 1;
    iter++;
  }
}


////////////////////////////////////////////////////////////////////////////
// Problem 8 ///////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////

// The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.

// 73167176531330624919225119674426574742355349194934
// 96983520312774506326239578318016984801869478851843
// 85861560789112949495459501737958331952853208805511
// 12540698747158523863050715693290963295227443043557
// 66896648950445244523161731856403098711121722383113
// 62229893423380308135336276614282806444486645238749
// 30358907296290491560440772390713810515859307960866
// 70172427121883998797908792274921901699720888093776
// 65727333001053367881220235421809751254540594752243
// 52584907711670556013604839586446706324415722155397
// 53697817977846174064955149290862569321978468622482
// 83972241375657056057490261407972968652414535100474
// 82166370484403199890008895243450658541227588666881
// 16427171479924442928230863465674813919123162824586
// 17866458359124566529476545682848912883142607690042
// 24219022671055626321111109370544217506941658960408
// 07198403850962455444362981230987879927244284909188
// 84580156166097919133875499200524063689912560717606
// 05886116467109405077541002256983155200055935729725
// 71636269561882670428252483600823257530420752963450
// Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?

function solve8() {
  var range   = 13;
  var num_str = '7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450';
  var max     = 0;
  var slice   = '';
  for (var i = 0; i < num_str.length - range; i++) {
    slice = num_str.slice(i, i + range);
    if (/0/.test(slice)) continue;
    max = Math.max(numSliceProduct(slice), max);
  }
  return max;

  function numSliceProduct(str) {
    return str.split("").reduce(function(a,b){ return a*b; });
  }
}